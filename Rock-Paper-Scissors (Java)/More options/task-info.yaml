type: edu
files:
- name: src/rockpaperscissors/Main.java
  visible: true
  text: |
    package rockpaperscissors;

    public class Main {
        public static void main(String[] args) {
            // write your code here
        }
    }
  learner_created: false
- name: test/Tests.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\n\nimport java.util.ArrayList;\n\
    import java.util.Arrays;\nimport java.util.List;\nimport java.util.Random;\nimport\
    \ java.util.stream.Collectors;\n\npublic class Tests extends StageTest<String>\
    \ {\n    String[] cases = new String[]{\"rock\",\n            \"paper\",\n   \
    \         \"scissors\"};\n    int loses = 0;\n    int wins = 0;\n    int draws\
    \ = 0;\n    String fileName = \"rating.txt\";\n    int startScore = 350;\n   \
    \ String userName = \"Bob\";\n\n    CheckResult checkInvalidInput(String reply,\
    \ String attach) {\n        if (!reply.toLowerCase().contains(\"invalid\"))\n\
    \            return CheckResult.wrong(\"Looks like your program doesn't handle\
    \ invalid inputs correctly.\\n\" +\n                    \"You should print 'Invalid\
    \ input' if the input can't be processed.\");\n        return CheckResult.correct();\n\
    \    }\n\n    CheckResult checkValidInputs(String reply, String attach) {\n  \
    \      int results = 0;\n        int attachInt = Integer.parseInt(attach);\n \
    \       for (String s : reply.toLowerCase().split(\"\\n\")) {\n            if\
    \ (s.contains(\"sorry\"))\n                results++;\n            if (s.contains(\"\
    draw\"))\n                results++;\n            if (s.contains(\"well done\"\
    ))\n                results++;\n        }\n        if (results != attachInt) {\n\
    \            return CheckResult.wrong(String.format(\"Not enough results of the\
    \ games were printed!\\n\" +\n                            \"Tried to input %s\
    \ actions and got %s results of the games.\\n\" +\n                          \
    \  \"Perhaps your program did not run enough games. Is it set up correctly to\
    \ loop \" +\n                            \"until the user inputs ‘!exit’? \\nAlso,\
    \ make sure you print the result of the \" + \n                            \"\
    game in the correct format after each valid input!\",\n                    attach,\
    \ results));\n        }\n        return CheckResult.correct();\n    }\n\n    CheckResult\
    \ checkResults(String reply, String attach) {\n        for (String s : reply.toLowerCase().split(\"\
    \\n\")) {\n            if (s.contains(\"sorry\"))\n                loses++;\n\
    \            else if (s.contains(\"draw\"))\n                draws++;\n      \
    \      else if (s.contains(\"well done\"))\n                wins++;\n        }\n\
    \        CheckResult wrongRandomize = CheckResult.wrong(String.format(\n     \
    \           \"The results of the games: %s wins, %s draws and %s loses\\n\" +\n\
    \                        \"The game is too easy to win. Is the computer being\
    \ too predictable? \" +\n                        \"The number of wins, draws and\
    \ loses should be approximately the same.\\n\" +\n                        \"Perhaps\
    \ you don't use the random module to choose random option.\\n\" +\n          \
    \              \"Also, make sure you output the results of \" +\n            \
    \            \"the games the same way as was stated in the examples!\\n\" +\n\
    \                        \"If you are sure that you use the random module, try\
    \ to rerun the tests!\\n\",\n                wins, draws, loses));\n\n       \
    \ if (loses < 20)\n            return wrongRandomize;\n        if (draws < 20)\n\
    \            return wrongRandomize;\n        if (wins < 20)\n            return\
    \ wrongRandomize;\n\n        return CheckResult.correct();\n\n    }\n\n    public\
    \ List<TestCase<String>> generate() {\n        String[] validInputCases = {String.format(\n\
    \                \"%s\\n\\nrock\\npaper\\nscissors\\npaper\\nscissors\\nrock\\\
    npaper\\nscissors\\n!exit\", userName),\n                String.format(\n    \
    \                    \"%s\\n\\nscissors\\nscissors\\nscissors\\n!exit\", userName)};\n\
    \        String[] invalidInputCases = {String.format(\"%s\\n\\nrock\\npaper\\\
    npaper\\nscissors\\nblabla\\n!exit\", userName),\n                String.format(\n\
    \                        \"%s\\n\\nrock\\ninvalid\\n!exit\", userName),\n    \
    \            String.format(\n                        \"%s\\n\\nrock\\nrock\\nrock\\\
    nrock-n-roll\\n!exit\", userName)};\n        List<TestCase<String>> tests = new\
    \ ArrayList<>();\n        //Cases that checks multiple input\n        for (String\
    \ input : validInputCases) {\n            TestCase<String> testCase = new TestCase<>();\n\
    \            testCase.setCheckFunc(this::checkValidInputs);\n            testCase.setAttach(String.valueOf(input.split(\"\
    \\n\").length - 3));\n            testCase.setInput(input);\n            testCase.addFile(fileName,\
    \ String.format(\n                    \"%s %s\\nJane 200\\nAlex 400\", userName,\
    \ startScore));\n            tests.add(testCase);\n        }\n        //Cases\
    \ that check invalid input\n        for (String input : invalidInputCases) {\n\
    \            TestCase<String> testCase = new TestCase<>();\n            testCase.setCheckFunc(this::checkInvalidInput);\n\
    \            testCase.setInput(input);\n            testCase.addFile(fileName,\
    \ String.format(\"%s %s\\nJane 200\\nAlex 400\", userName, startScore));\n   \
    \         tests.add(testCase);\n        }\n        //Cases that check using random\
    \ module\n        String longInput = String.format(\"%s\\n\\n\", userName) + \"\
    rock\\n\".repeat(100) +\n                \"!exit\";\n        TestCase<String>\
    \ testCase = new TestCase<>();\n        testCase.setCheckFunc(this::checkResults);\n\
    \        testCase.setAttach(\"rock\");\n        testCase.setInput(longInput);\n\
    \        testCase.addFile(fileName, String.format(\"%s %s\\nJane 200\\nAlex 400\"\
    , userName, startScore));\n        tests.add(testCase);\n        //Case that checks\
    \ score\n        String[] temp = longInput.split(\"\\n\");\n        temp[temp.length\
    \ - 2] = \"!rating\";\n        StringBuilder sb = new StringBuilder();\n     \
    \   for (String t : temp) {\n            sb.append(t);\n            sb.append(\"\
    \\n\");\n        }\n        longInput = sb.toString();\n        testCase = new\
    \ TestCase<>();\n        testCase.setCheckFunc(this::checkFile);\n        testCase.setAttach(\"\
    rock\");\n        testCase.setInput(longInput);\n        testCase.addFile(fileName,\
    \ String.format(\"%s %s\\nJane 200\\nAlex 400\", userName, startScore));\n   \
    \     tests.add(testCase);\n        //Case that check advanced options\n     \
    \   String[] options =\n                (\"rock,gun,lightning,devil,dragon,water,air,paper,\"\
    \ +\n                        \"sponge,wolf,tree,human,snake,scissors,fire\").split(\n\
    \                        \",\");\n        sb = new StringBuilder();\n        sb.append(String.format(\n\
    \                \"%s\\nrock,gun,lightning,devil,dragon,water,air,paper,\" +\n\
    \                        \"sponge,wolf,tree,human,snake,scissors,fire\\n\", userName));\n\
    \        Random r = new Random(System.nanoTime());\n        for (int i = 0; i\
    \ < 20; i++) {\n            sb.append(String.format(\"%s\\n\", options[r.nextInt(options.length)]));\n\
    \        }\n        sb.append(\"!rating\\n!exit\");\n        String advancedInput\
    \ = sb.toString();\n        testCase = new TestCase<>();\n        testCase.setCheckFunc(this::checkAdvanced);\n\
    \        testCase.setAttach(advancedInput);\n        testCase.setInput(advancedInput);\n\
    \        testCase.addFile(fileName, String.format(\"%s %s\\nJane 200\\nAlex 400\"\
    , userName, startScore));\n        tests.add(testCase);\n        return tests;\n\
    \n    }\n\n    CheckResult checkAdvanced(String reply, String attach) {\n    \
    \    List<String> attachArray = Arrays.stream(attach.split(\"\\n\")).collect(Collectors.toList());\n\
    \        for (int i = 0; i < 2; i++) {\n            attachArray.remove(0);\n \
    \           attachArray.remove(attachArray.size() - 1);\n        }\n        List<String>\
    \ options = Arrays.stream(\n                (\"rock,gun,lightning,devil,dragon,water,air,\"\
    \ +\n                        \"paper,sponge,wolf,tree,human,snake,scissors,fire\"\
    )\n                        .split(\",\")).collect(Collectors.toList());\n\n  \
    \      if (!reply.toLowerCase().contains(\"okay, let's start\"))\n           \
    \ return CheckResult.wrong(\n                    \"There is no \\\"Okay, let's\
    \ start\\\" message in the output!\");\n\n        boolean isGameStarted = false;\n\
    \        int i = 0;\n\n        for (String line : reply.split(\"\\n\")) {\n  \
    \          if (line.toLowerCase().contains(\"okay, let's start\")) {\n       \
    \         isGameStarted = true;\n                continue;\n            }\n  \
    \          if (!isGameStarted)\n                continue;\n            if (i ==\
    \ attachArray.size())\n                break;\n            String inp = attachArray.get(i);\n\
    \            int index = options.indexOf(inp);\n            List<String> temp\
    \ = new ArrayList<>();\n            for (int j = index + 1; j < options.size();\
    \ j++)\n                temp.add(options.get(j));\n            for (int j = 0;\
    \ j < index; j++)\n                temp.add(options.get(j));\n            int\
    \ half = options.size() / 2;\n            List<String> lose = new ArrayList<>();\n\
    \            for (int j = 0; j < half; j++)\n                lose.add(temp.get(j));\n\
    \            List<String> win = new ArrayList<>();\n            for (int j = half;\
    \ j < temp.size(); j++)\n                win.add(temp.get(j));\n\n           \
    \ String lineLower = line.toLowerCase();\n            if (!(lineLower.contains(\"\
    draw\") || lineLower.contains(\"sorry\") || lineLower.contains(\"well done\")))\n\
    \                return CheckResult.wrong(String.format(\n                   \
    \     \"This answer seems to be wrong:\\\"%s\\\". \\n\" +\n                  \
    \              \"The game did not respond on a valid option with \" +\n      \
    \                          \"a correctly formatted win, lose, or draw result.\\\
    n\", line));\n\n            boolean optionsMentions = false;\n            for\
    \ (String opt : options)\n                if (lineLower.contains(opt)) {\n   \
    \                 optionsMentions = true;\n                    break;\n      \
    \          }\n            if (!optionsMentions)\n                return CheckResult.wrong(String.format(\n\
    \                        \"This answer seems to be wrong: \\\"%s\\\".\\n\" +\n\
    \                                \"This answer does not contain the name of a\
    \ valid \" +\n                                \"option chosen by the computer.\\\
    n\", line));\n            if (lineLower.contains(\"well done\")) {\n         \
    \       boolean finded = false;\n                for (String option : win) {\n\
    \                    if (lineLower.contains(option)) {\n                     \
    \   finded = true;\n                        break;\n                    }\n  \
    \              }\n                if (!finded)\n                    return CheckResult.wrong(\"\
    Wrong win!\");\n            } else if (lineLower.contains(\"draw\") && !lineLower.contains(inp))\n\
    \                return CheckResult.wrong(\"Wrong draw!\");\n            else\
    \ if (lineLower.contains(\"sorry\")) {\n                boolean found = false;\n\
    \                for (String option : lose) {\n                    if (lineLower.contains(option))\
    \ {\n                        found = true;\n                        break;\n \
    \                   }\n                }\n                if (!found)\n      \
    \              return CheckResult.wrong(\"Wrong lose!\");\n            }\n   \
    \         i += 1;\n        }\n        return CheckResult.correct();\n\n    }\n\
    \n    CheckResult checkFile(String reply, String attach) {\n        if (!reply.toLowerCase().contains(\"\
    enter your name\"))\n            return CheckResult.wrong(\n                 \
    \   \"Seems like you did not offer the user to input their name. \" +\n      \
    \                      \"Your program should output \\\"Enter your name:\\\" before\
    \ the start of the game.\\n\");\n        if (!reply.toLowerCase().contains(String.format(\"\
    hello, %s\", userName).toLowerCase()))\n            return CheckResult.wrong(\n\
    \                    \"Seems like you did not greet the user. \" +\n         \
    \                   \"Your program should output \\\"Hello, <user_name>\\\"\\\
    n\");\n        for (String line : reply.split(\"\\n\")) {\n            String\
    \ lowerLine = line.toLowerCase();\n            if (lowerLine.contains(\"well done\"\
    ) && !lowerLine.contains(\"scissors\"))\n                return CheckResult.wrong(String.format(\n\
    \                        \"Wrong result of the game:\\n> rock\\n%s\\nRock can\
    \ only beat scissors!\", line));\n            else if (lowerLine.contains(\"draw\"\
    ) && !lowerLine.contains(\"rock\"))\n                return CheckResult.wrong(String.format(\n\
    \                        \"Wrong result of the game:\\n> rock\\n%s\\n\" +\n  \
    \                              \"The game ends with a draw only when user \" +\n\
    \                                \"option and computer choose the same option\"\
    , line));\n            else if (lowerLine.contains(\"sorry\") && !lowerLine.contains(\"\
    paper\"))\n                return CheckResult.wrong(String.format(\n         \
    \               \"Wrong result of the game:\\n> rock\\n%s\\nOnly paper can beat\
    \ rock!\", line));\n        }\n        draws = 0;\n        loses = 0;\n      \
    \  wins = 0;\n        for (String s : reply.toLowerCase().split(\"\\n\")) {\n\
    \            if (s.contains(\"sorry\")) {\n                loses++;\n        \
    \    } else if (s.contains(\"draw\")) {\n                draws++;\n          \
    \  } else if (s.contains(\"well done\"))\n                wins++;\n        }\n\
    \        int correctPoints = startScore + wins * 100 + draws * 50;\n        if\
    \ (!reply.contains(String.valueOf(correctPoints)))\n            return CheckResult.wrong(\n\
    \                    \"Looks like you incorrectly calculated the player's score!\\\
    n\" +\n                            \"Make sure that you took into account the\
    \ \" +\n                            \"user's initial score written in the file.\\\
    n\" +\n                            \"For each draw, add 50 point to the score.\
    \ \" +\n                            \"For each user's win, add 100 to his/her\
    \ score.\\n\" +\n                            \"In case the user loses, don't change\
    \ the score.\_\");\n        return CheckResult.correct();\n\n    }\n}\n"
  learner_created: false
- name: src/rockpaperscissors/rating.txt
  visible: true
  learner_created: true
- name: src/rockpaperscissors/ratings.txt
  visible: true
  text: |-
    Tim 350
    Jane 200
    Alex 400
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/24619#comment
status: Solved
feedback:
  message: Well done! You've finished the project. Select a new project on <a href="https://hyperskill.org/projects">Hyperskill</a>
    to continue learning.
  time: "Tue, 04 Jul 2023 11:59:54 UTC"
record: 5
